import org.apache.tools.ant.filters.EscapeUnicode
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id "org.sonarqube" version "3.3"
    id "org.owasp.dependencycheck" version "6.4.1.1"
}

apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'jacoco'
apply from: "monext.gradle"

description = 'payment-method-sdd-slimpay'
group = 'com.payline.payment.sdd-slimpay'
version = '1.1.2-SNAPSHOT'

sourceCompatibility = 14
targetCompatibility = 14

compileJava.options.encoding = 'UTF-8'

ext {
    paymentMethodApiVersion = '1.16'
    paymentMethodIntegrationVersion = '1.16'
    mockitoVersion = '4.3.1'
    junitVersion = '5.8.2'
    log4jVersion = '2.17.2'
    releaseDirectoryPath = 'D:/build'
}

dependencies {
    compileOnly("com.payline:payment-method-api:$paymentMethodApiVersion")

    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.8'
    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'

    implementation group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.14'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'

    implementation group: 'com.slimpay', name: 'hapiclient', version: '1.0.3'

    testImplementation "com.payline:payment-method-api:${paymentMethodApiVersion}"
    testImplementation "com.payline:payment-method-integration:${paymentMethodIntegrationVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
}

dependencyCheck {
    format 'ALL'
    skipConfigurations = ['jacocoAgent', 'jacocoAnt', 'annotationProcessor', 'axisGenAntTask', 'jaxws', 'execJar', 'jaxb', 'generateSources']
    cve {
        urlBase = 'https://jindus.intra.monext.fr/nist-data-mirror/nvdcve-1.0-%d.json.gz'
        urlModified = 'https://jindus.intra.monext.fr/nist-data-mirror/nvdcve-1.0-modified.json.gz'
    }
}

assemble.dependsOn shadowJar

shadowJar {
    classifier = ''
    dependencies {
        exclude(dependency('com.payline:payment-method-api'))
        exclude(dependency('org.apache.logging.log4j:log4j-api'))
        exclude(dependency('org.apache.logging.log4j:log4j-core'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-params'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-api'))
    }
}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Build-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility
        )
    }
}

task buildToLocal(type: Copy) {
    dependsOn shadowJar
    from shadowJar
    into "${releaseDirectoryPath}"
}

task printVersion {
    doLast {
        println version
    }
}

/* Replace tokens in resources files after compilation */
processResources {
    filesMatching('messages_fr.properties') {
        filter(EscapeUnicode)
    }
    filesMatching('release.properties') {
        filter(ReplaceTokens, tokens: [
                'version': project.version,
                'date'   : new Date().format("dd/MM/yyyy")
        ])
    }
}

test {
    useJUnitPlatform()
}
test.exclude '**/*IT.class'

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

plugins.withType(JacocoPlugin) {
    tasks["test"].finalizedBy 'jacocoTestReport'
}

sonarqube {
    properties {
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property 'sonar.dependencyCheck.htmlReportPath', "${project.buildDir}/reports/dependency-check-report.html"
    }
}
